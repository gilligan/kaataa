/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mars.rover;

import java.util.Arrays;

public class Library {

    public static enum Orientation { N, S, W, E };
    public static enum Instruction { Left, Right, Move };

    public static class Rover {
        private Integer x;
        private Integer y;
        public Orientation orientation;
        public Rover(Integer x, Integer y, Orientation o) {
            this.x = x;
            this.y = y;
            this.orientation = o;
        }

        @Override
        public String toString() {
            String s = String.format("Rover (%d,%d,%s)", x, y, orientation);
            return s;
        }

        @Override
        public boolean equals(Object o) {
            if (o == this)
                return true;

            if (o == null)
                return false;

            if (!(o instanceof Rover))
                return false;

            Rover other = (Rover)o;
            return other.x == x && other.y == y && other.orientation == orientation;

        }

        public Rover move() {
            switch (orientation) {
                case N:
                    return new Rover(x, y+1, orientation);
                case S:
                    return new Rover(x, y-1, orientation);
                case E:
                    return new Rover(x+1, y, orientation);
                default:
                case W:
                    return new Rover(x-1, y, orientation);
            }
        }

        public Rover exec(Instruction[] is) {
            if (is.length == 0) return this;

            Rover r = exec(is[0]);

            return r.exec(Arrays.copyOfRange(is, 1, is.length));
        }

        public Rover exec(Instruction i) {
            switch (i) {
                case Move:
                    return this.move();
                case Left:
                    return this.rotateLeft();
                default:
                case Right:
                    return this.rotateRight();
            }
        }

        public Rover rotateRight() {
            return rotateLeft().rotateLeft().rotateLeft();
        }

        public Rover rotateLeft() {
            switch (this.orientation) {
                case N:
                    return new Rover(x, y, Orientation.W);
                case W:
                    return new Rover(x, y, Orientation.S);
                case S:
                    return new Rover(x, y, Orientation.E);
                case E:
                    return new Rover(x, y, Orientation.N);
                default:
                    return this;
            }
        }
    }

    public boolean someLibraryMethod() {
        return false;
    }
}
